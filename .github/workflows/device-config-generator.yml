name: Device Configuration Generator

on:
  # Manual trigger với inputs
  workflow_dispatch:
    inputs:
      device_name:
        description: 'Device Name (e.g., PIXEL9PRO)'
        required: true
        type: string
      vendor_prop_url:
        description: 'Vendor build.prop URL'
        required: true
        type: string
      auto_commit:
        description: 'Auto commit to repository'
        required: false
        type: boolean
        default: true
  
  # Scheduled run (weekly update)
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight
  
  # Push trigger for config updates
  push:
    paths:
      - 'device_sources.json'
      - '.github/workflows/device-config-generator.yml'

jobs:
  generate-single-config:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 📦 Install dependencies
        run: |
          pip install requests pyyaml
      
      - name: 🔧 Generate device configuration
        id: generate
        run: |
          cat > generator.py << 'EOF'
          import requests
          import json
          import sys
          import re
          from datetime import datetime
          
          def extract_properties(content, url):
              props = {}
              for line in content.split('\n'):
                  if '=' in line and not line.startswith('#'):
                      key, value = line.split('=', 1)
                      props[key.strip()] = value.strip()
              
              # Property mappings with fallbacks
              mappings = {
                  'BRAND': ['ro.product.vendor.brand', 'ro.vendor.product.brand', 'ro.product.brand'],
                  'DEVICE': ['ro.product.vendor.device', 'ro.vendor.product.device', 'ro.product.device'],
                  'MANUFACTURER': ['ro.product.vendor.manufacturer', 'ro.vendor.product.manufacturer', 'ro.product.manufacturer'],
                  'MODEL': ['ro.product.vendor.model', 'ro.vendor.product.model', 'ro.product.model'],
                  'FINGERPRINT': ['ro.vendor.build.fingerprint', 'ro.build.fingerprint'],
                  'PRODUCT': ['ro.product.vendor.name', 'ro.vendor.product.name', 'ro.product.name'],
                  'BOARD': ['ro.product.board', 'ro.board.platform'],
                  'HARDWARE': ['ro.hardware', 'ro.product.board'],
                  'BOOTLOADER': ['ro.build.expect.bootloader', 'ro.bootloader'],
                  'DISPLAY': ['ro.vendor.build.id', 'ro.build.display.id'],
                  'ID': ['ro.vendor.build.id', 'ro.build.id'],
                  'INCREMENTAL': ['ro.vendor.build.version.incremental', 'ro.build.version.incremental'],
                  'RELEASE': ['ro.vendor.build.version.release', 'ro.build.version.release'],
                  'SDK': ['ro.vendor.build.version.sdk', 'ro.build.version.sdk'],
                  'SECURITY_PATCH': ['ro.vendor.build.security_patch', 'ro.build.version.security_patch']
              }
              
              config = {}
              for prop, keys in mappings.items():
                  for key in keys:
                      if key in props:
                          config[prop] = props[key]
                          break
                  if prop not in config:
                      config[prop] = ""
              
              # Add metadata
              config['_metadata'] = {
                  'source': url,
                  'generated': datetime.now().isoformat(),
                  'generator': 'GitHub Actions Workflow'
              }
              
              return config
          
          # Main execution
          device_name = sys.argv[1]
          url = sys.argv[2]
          
          print(f"📱 Generating config for {device_name}")
          print(f"📥 Downloading from: {url}")
          
          response = requests.get(url)
          response.raise_for_status()
          
          config = extract_properties(response.text, url)
          
          # Generate final JSON
          output = {
              f"PACKAGES_{device_name}": [],
              f"PACKAGES_{device_name}_DEVICE": {
                  **{k: v for k, v in config.items() if not k.startswith('_')},
                  "spoofProps": True,
                  "spoofBuild": True,
                  "antiDetection": True,
                  "verbose": False
              },
              "_metadata": config.get('_metadata', {})
          }
          
          # Save configuration
          filename = f"configs/{device_name}.json"
          with open(filename, 'w') as f:
              json.dump(output, f, indent=2)
          
          print(f"✅ Configuration saved to {filename}")
          
          # Output for GitHub Actions
          print(f"::set-output name=device_model::{config.get('MODEL', 'Unknown')}")
          print(f"::set-output name=android_version::{config.get('RELEASE', 'Unknown')}")
          print(f"::set-output name=config_file::{filename}")
          EOF
          
          mkdir -p configs
          python generator.py "${{ inputs.device_name }}" "${{ inputs.vendor_prop_url }}"
      
      - name: 📊 Generate summary
        run: |
          echo "## 📱 Device Configuration Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Device**: ${{ inputs.device_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Model**: ${{ steps.generate.outputs.device_model }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android**: ${{ steps.generate.outputs.android_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **File**: \`${{ steps.generate.outputs.config_file }}\`" >> $GITHUB_STEP_SUMMARY
      
      - name: 💾 Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: config-${{ inputs.device_name }}
          path: configs/${{ inputs.device_name }}.json
      
      - name: 🔄 Commit changes
        if: inputs.auto_commit
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add configs/
          git commit -m "✨ Add device config: ${{ inputs.device_name }}" || exit 0
          git push

  generate-batch-configs:
    if: github.event_name == 'schedule' || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - device: PIXEL9PRO
            url: https://dumps.tadiphone.dev/dumps/google/caiman/vendor/build.prop
          - device: PIXEL8A
            url: https://dumps.tadiphone.dev/dumps/google/akita/vendor/build.prop
          - device: PIXEL8
            url: https://dumps.tadiphone.dev/dumps/google/shiba/vendor/build.prop
          - device: PIXEL7PRO
            url: https://dumps.tadiphone.dev/dumps/google/cheetah/vendor/build.prop
          - device: S24ULTRA
            url: https://dumps.tadiphone.dev/dumps/samsung/dm3q/vendor/build.prop
          - device: ONEPLUS12
            url: https://dumps.tadiphone.dev/dumps/oneplus/waffle/vendor/build.prop
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 📦 Install dependencies
        run: pip install requests
      
      - name: 🔧 Generate ${{ matrix.device }} config
        run: |
          mkdir -p configs
          
          cat > generate.py << 'EOF'
          import requests
          import json
          import sys
          import os
          
          device = "${{ matrix.device }}"
          url = "${{ matrix.url }}"
          
          print(f"Processing {device}...")
          
          try:
              response = requests.get(url, timeout=30)
              response.raise_for_status()
              
              props = {}
              for line in response.text.split('\n'):
                  if '=' in line and not line.startswith('#'):
                      key, value = line.split('=', 1)
                      props[key.strip()] = value.strip()
              
              # Extract properties (simplified)
              config = {
                  "BRAND": props.get('ro.product.vendor.brand', ''),
                  "DEVICE": props.get('ro.product.vendor.device', ''),
                  "MODEL": props.get('ro.product.vendor.model', ''),
                  "FINGERPRINT": props.get('ro.vendor.build.fingerprint', ''),
                  "RELEASE": props.get('ro.vendor.build.version.release', ''),
                  "SDK": props.get('ro.vendor.build.version.sdk', ''),
                  "SECURITY_PATCH": props.get('ro.vendor.build.security_patch', '')
              }
              
              output = {
                  f"PACKAGES_{device}": [],
                  f"PACKAGES_{device}_DEVICE": {
                      **config,
                      "spoofProps": True,
                      "spoofBuild": True
                  }
              }
              
              with open(f"configs/{device}.json", 'w') as f:
                  json.dump(output, f, indent=2)
              
              print(f"✅ {device} completed")
              
          except Exception as e:
              print(f"❌ {device} failed: {e}")
              sys.exit(1)
          EOF
          
          python generate.py
      
      - name: 📦 Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: batch-configs
          path: configs/

  merge-and-release:
    needs: [generate-batch-configs]
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 📦 Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: batch-configs
          path: configs/
      
      - name: 🔀 Merge configurations
        run: |
          cat > merge.py << 'EOF'
          import json
          import os
          from datetime import datetime
          
          merged = {
              "_metadata": {
                  "version": "2.0",
                  "generated": datetime.now().isoformat(),
                  "total_devices": 0
              }
          }
          
          # Merge all individual configs
          for file in os.listdir('configs'):
              if file.endswith('.json'):
                  with open(f'configs/{file}', 'r') as f:
                      data = json.load(f)
                      merged.update(data)
                      merged["_metadata"]["total_devices"] += 1
          
          # Save merged config
          with open('merged_config.json', 'w') as f:
              json.dump(merged, f, indent=2)
          
          print(f"✅ Merged {merged['_metadata']['total_devices']} device configs")
          EOF
          
          python merge.py
      
      - name: 🏷️ Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: config-${{ github.run_number }}
          name: Device Configs - Build ${{ github.run_number }}
          body: |
            ## 📱 Device Configurations
            
            Auto-generated device configurations for SpoofXManager
            
            **Generated**: ${{ github.event.repository.updated_at }}
            **Total Devices**: Check merged_config.json
            
            ### Files
            - `merged_config.json` - All devices merged
            - Individual device configs in `configs/` folder
          files: |
            merged_config.json
            configs/*.json